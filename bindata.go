// Code generated by go-bindata.
// sources:
// resources/add_template.html
// resources/edit_template.html
// resources/style.css
// resources/view_template.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAdd_templateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x61\x6f\xe2\x38\x10\xfd\x0c\xbf\xc2\x97\xaa\xca\x9d\x04\x24\x50\xaa\xb6\x2e\x70\x6a\xef\x76\x3f\x6e\xab\xdd\x6a\xa5\x7e\x9c\xc4\x26\xb1\xea\xd8\x91\xed\x40\x11\xe2\xbf\xaf\xed\x90\x00\x2a\xa8\xa8\xa9\xd4\x58\x9e\xf7\xe6\xbd\x19\x4f\xcc\xe4\xaf\xff\x9f\xfe\x7b\x79\x7d\xfe\x86\x72\x53\xf0\x59\x77\x52\xbf\xba\x9d\x49\x4e\x81\xcc\xba\x9d\xce\x84\x33\xf1\x86\x72\x45\xe7\xd3\x30\x37\xa6\xd4\x38\x8a\xe6\x52\x18\x3d\xc8\xa4\xcc\x38\x85\x92\xe9\x41\x2a\x8b\x28\xd5\xfa\xdf\x39\x14\x8c\xaf\xa6\x3f\x65\x22\x8d\xc4\xe3\x38\xee\xdd\xc4\x71\x88\x14\xe5\xd3\x50\x9b\x15\xa7\x3a\xa7\xd4\x84\xc8\xac\x4a\x3a\x0d\x0d\x7d\x37\x8e\x16\x7a\x1d\x1f\x77\xab\x44\x92\x15\x5a\xdb\x05\xb2\x8f\x93\xea\xd7\x69\x31\x0a\xeb\xc4\x61\x0f\x69\x10\xba\xaf\xa9\x62\xf3\xfb\x2d\x30\x81\xf4\x2d\x53\xb2\x12\xa4\x9f\x4a\x2e\x15\xbe\x20\x84\x34\xc1\x02\x54\xc6\x04\x86\xca\xc8\x66\xcb\x89\xf7\x81\xb3\x4c\xe0\x94\x0a\x43\x55\x13\x58\x32\x62\x72\x7c\x17\x5f\xba\x8d\x8d\x6d\x45\x27\x1f\xb6\x76\x3e\xaa\xc4\x57\x37\xd7\x8f\xe3\x86\x5c\x6f\x2e\x73\x66\x68\x4b\x37\x90\x70\x7a\x32\x01\xba\xf8\xee\x9f\xb6\x0e\xa9\x08\x55\x2e\xc8\xa1\xd4\x14\xa3\x66\x75\xc4\x38\xa7\x73\x73\x68\x7b\x18\xc7\x97\xad\x2e\xe9\x21\x93\x37\xc2\x25\x10\xc2\x44\x86\xd1\x6d\xf9\x7e\xa8\x85\xd1\xb0\x7c\x47\x5a\x72\x46\x50\xd3\xb4\x6d\x02\x04\x68\x4d\x98\x2e\x39\xac\x70\xc2\x65\xfa\x76\x5f\x07\xda\xac\x5b\xb7\xf6\x54\x8c\x2c\xf0\xc7\x3c\x5f\xe8\xd9\x9e\xd9\xbe\x91\xa5\x75\x37\xda\x39\x6e\x02\x5b\xc1\x36\x56\xdb\x52\x58\x98\xbc\x9f\xe6\x8c\x93\xbf\x25\x21\xff\xa0\xf5\x91\x76\xcf\x47\xee\xaf\x21\xe4\x72\x41\xd5\x31\x98\x2d\xc0\x63\xa0\x3d\x7b\xdf\x78\x42\x53\xa9\xc0\x30\x29\xb0\x90\x62\x77\xc8\xd0\x43\x80\x17\x4c\xdb\x22\x08\x5a\xd7\x49\x12\x6e\xd3\xfa\xe8\x40\xc0\xe2\x8b\x23\xb4\x7f\x76\x07\xd5\xba\x9c\x8d\xe2\x7a\x8f\xb4\x0b\x9e\xa8\xed\x22\x8e\x6f\x6e\xc7\x77\x1e\x37\x97\xaa\x38\x3d\xdc\x9f\x9b\x70\x3d\x01\x45\x6d\x93\x3e\xff\x50\xb7\xc6\x2a\x2b\xf8\xe1\xe3\xdb\xb8\x1b\x20\x6a\xae\x80\x49\x54\xdf\x3e\x76\xe5\x2e\x03\xb7\x53\xc3\xdc\x2a\x1f\xce\xd6\xeb\xc1\x0b\x33\x9c\x6e\x36\x16\x39\x9c\x75\xd1\xf6\x99\x00\x4a\x39\x68\x3d\x0d\x6c\xf9\x01\xaa\x6f\xad\x60\x30\x88\x16\x8c\x2e\xa3\x60\xf6\xdb\xbe\x26\x11\x9c\x24\xb4\x78\x5b\xaa\x85\x3f\x10\xe2\xd1\xd6\x85\x42\xd1\xac\xfe\xef\x8c\xfa\xae\x41\xea\xa6\x60\x1a\x44\x1a\x16\x34\x0a\x50\x41\x4d\x2e\xc9\x34\x78\x7e\xfa\xf5\x12\x38\xd8\x43\x65\x37\x94\xc6\x96\xe7\x14\x2d\x8f\x89\xb2\x32\xf5\xe5\x17\xb8\x16\x04\x48\x40\x61\xd7\x5b\x64\xd0\x48\x38\xf0\x2b\x05\x75\x06\xd5\xc1\x82\x9d\x35\xdf\x96\x33\x68\x1e\x77\xa0\xf7\x5c\x25\x9c\xd9\xeb\x99\xa0\xc7\xd5\xb9\x09\x46\xfb\xca\x90\xf9\x52\x9b\x7c\xa7\x99\x90\x0d\x83\xcf\x31\xa3\x33\x30\x57\x67\x60\xc6\xde\xa3\xb7\xf8\x43\x1a\xaa\x31\xda\x9d\x63\x3b\xbd\x4a\x2e\xed\x0c\x8c\x03\xf7\xf1\xd9\xc5\x75\x1c\x1c\x49\xe6\xe9\x36\x5b\xd4\xd0\xf6\x26\x82\xb0\xc5\xec\xc0\x85\xae\x92\x82\x59\xea\x02\x78\xe5\x4e\x98\x10\xc7\x74\x30\x3f\xe9\x6e\x82\xfc\xa0\xef\xe6\x3a\xaa\x47\xbd\x6b\x47\xda\xff\x06\xff\x09\x00\x00\xff\xff\x09\xbf\x5f\xa1\x9b\x07\x00\x00")

func resourcesAdd_templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAdd_templateHtml,
		"resources/add_template.html",
	)
}

func resourcesAdd_templateHtml() (*asset, error) {
	bytes, err := resourcesAdd_templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/add_template.html", size: 1947, mode: os.FileMode(420), modTime: time.Unix(1466058796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesEdit_templateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x6d\x6f\xdb\x36\x10\xfe\x6c\xff\x8a\x9b\x82\xc2\x1b\x10\x5b\x72\xe2\x22\x2d\x2b\x6b\x68\x97\x0e\xc8\x97\x35\xe8\xb2\x01\xfd\x48\x8b\xb4\x44\x84\x22\x05\x92\x72\x62\x18\xfa\xef\x23\xa9\x17\xdb\xb0\xbc\x18\x95\x01\xeb\x70\x2f\xcf\x3d\x77\xe4\x9d\x1d\xff\x72\xff\xed\x8f\xa7\x1f\x8f\x5f\x21\x37\x05\x4f\xc6\x71\xf3\x1a\x8f\xe2\x9c\x62\x92\x8c\x47\xa3\x98\x33\xf1\x0c\xb9\xa2\xeb\xe5\x24\x37\xa6\xd4\x28\x0c\xd7\x52\x18\x3d\xcb\xa4\xcc\x38\xc5\x25\xd3\xb3\x54\x16\x61\xaa\xf5\xef\x6b\x5c\x30\xbe\x5d\x7e\x97\x2b\x69\x24\x5a\x44\xd1\xf5\x5d\x14\x4d\x40\x51\xbe\x9c\x68\xb3\xe5\x54\xe7\x94\x9a\x09\x98\x6d\x49\x97\x13\x43\x5f\x8d\x0b\x9b\xf8\x3c\xde\xee\xa4\x95\x24\x5b\xd8\x59\x01\xec\xe3\x52\x4d\x1b\x58\x04\x93\x06\x78\x72\x0d\x1a\x0b\x3d\xd5\x54\xb1\xf5\xa7\xd6\x71\x85\xd3\xe7\x4c\xc9\x4a\x90\x69\x2a\xb9\x54\xe8\x8a\x10\xd2\x19\x0b\xac\x32\x26\x10\xae\x8c\xec\x54\x2e\xf9\x14\x73\x96\x09\x94\x52\x61\xa8\xea\x0c\x2f\x8c\x98\x1c\x7d\x8c\xde\x39\x45\x6d\x5b\x31\xca\xe7\x3d\x9d\xd3\x2c\xd1\xed\xdd\xfb\x2f\x8b\x2e\xb8\x51\xbe\xe4\xcc\xd0\x3e\xdc\xe0\x15\xa7\x67\x01\xe0\xea\x4f\xff\xf4\x75\x48\x45\xa8\x72\x46\x8e\x4b\x4d\x11\x74\xd2\x00\x71\x4e\xd7\xe6\x98\xf6\x3c\x8a\xde\xf5\x79\xc9\x35\x98\xbc\x4b\x5c\x62\x42\x98\xc8\x10\x7c\x28\x5f\x8f\x73\x21\x98\x97\xaf\xa0\x25\x67\x04\xba\xa6\xb5\x00\x80\x61\x47\x98\x2e\x39\xde\xa2\x15\x97\xe9\xf3\xa7\xc6\xd0\xa3\xb6\x6c\xed\xa9\x18\x59\xa0\x53\x9c\x9f\xe8\xd9\x01\xd9\xa9\x91\xa5\x65\x77\xb3\x67\xdc\x19\xda\x84\xbd\xad\xa1\xa5\x90\x30\xf9\x34\xcd\x19\x27\xbf\x4a\x42\x7e\x83\xdd\x40\xbb\xd7\x37\xee\xd3\x05\xe4\x72\x43\xd5\x90\x9b\x2d\xc0\xfb\xe0\xfe\xec\x7d\xe3\x09\x4d\xa5\xc2\x86\x49\x81\x84\x14\xfb\x43\xc6\xd7\x80\xd1\x86\x69\x5b\x04\x81\x5d\x03\xb2\xe2\x16\xd6\x5b\x67\x02\x6f\x7e\xf2\x0a\x1d\x9e\xdd\x51\xb5\x0e\xb3\xcb\xb8\x3b\x08\xda\x1b\xcf\xd4\x76\x15\x45\x77\x1f\x16\x1f\xbd\xdf\x5a\xaa\xe2\xfc\xe5\x7e\x9b\x84\xeb\x09\x56\xd4\x36\xe9\xed\x41\x6d\x89\x55\x36\xe1\xc9\xf0\xd5\x6e\x03\x84\xdd\x0a\x88\xc3\x66\xfb\x58\xc9\x2d\x03\xa7\x69\xdc\x9c\x94\xcf\x93\xaf\x84\x19\x4b\x05\xbe\xbb\xc3\x20\xd6\x7b\x9e\x8c\xa1\x7d\x62\x0c\x29\xc7\x5a\x2f\x03\xdb\x82\x00\x9a\xcd\x15\xcc\x66\xe1\x86\xd1\x97\x30\x48\xfe\xb5\xaf\x38\xc4\x67\x03\x7a\x7f\x5b\xae\x75\xff\x4c\x88\xf7\xb6\x4c\x14\x84\x49\xf3\xed\xc8\xfa\xce\xe1\xd4\xdd\x84\x65\x10\x56\x25\xc1\x86\x86\x01\x14\xd4\xe4\x92\x2c\x83\xc7\x6f\x7f\x3f\x05\xce\xf1\xe1\x1e\x81\x8d\xf2\x31\x4c\x94\x95\x69\x96\x5f\xe0\x5a\x10\x80\xc0\x85\x95\x1f\xee\x03\xd8\x60\x5e\xd1\xe5\x6e\x37\x7b\xc4\x25\x55\x7a\xf6\x70\x5f\xd7\x76\x71\x62\x22\x05\xdf\xee\xf3\x7e\xae\x2c\xbe\xd2\xc8\x43\x02\xfc\x0f\x68\xeb\x79\x8a\xdc\x1a\xea\xba\x43\x75\x30\x3f\x28\x56\x17\x80\x3a\xb7\x53\x44\xa7\xdd\xc3\x8d\x46\x4f\xcc\x70\x7a\x01\x9a\xf7\x3b\x85\xf3\xea\x63\x7a\x8f\xd5\x8a\x33\xfb\xe3\x41\xe0\xcb\xf6\x52\xe0\x9b\x33\xc8\x37\x47\x54\x71\xe6\x9b\xd9\x25\x3a\x0f\x89\xb3\xf9\x00\xa0\xd5\x5a\xb8\x37\x43\x87\xb8\x58\xed\x25\xa1\xb7\x83\xa1\xb7\x97\x84\x2e\x06\x43\x17\x4d\xfd\xbe\xfc\xbf\xa4\xa1\xda\x5f\xd0\xf6\x5a\xf7\x03\xad\xe4\x8b\x1d\x09\x8b\x60\x57\x81\x15\xde\x47\xc1\x40\x0e\x1f\x1e\x24\x7b\x78\xaf\xa8\xeb\x38\xec\x70\x0e\x26\x86\xb0\x4d\x72\xc4\x56\x57\xab\x82\x99\x8e\x63\xf0\x8f\x9f\xa1\x20\x89\x43\xe7\xe9\x17\x82\x1b\x32\xbf\x0f\xf6\xe3\x1f\x36\x1b\x61\x6c\xa7\xde\xff\x55\xf9\x2f\x00\x00\xff\xff\xad\x52\x5e\x1c\xc2\x08\x00\x00")

func resourcesEdit_templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesEdit_templateHtml,
		"resources/edit_template.html",
	)
}

func resourcesEdit_templateHtml() (*asset, error) {
	bytes, err := resourcesEdit_templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/edit_template.html", size: 2242, mode: os.FileMode(420), modTime: time.Unix(1466058792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x5b\xae\x9b\x30\x10\x86\xdf\x59\xc5\x48\x51\x94\x56\x0a\x15\x49\x53\x25\x71\xde\xfa\xd0\x05\x74\x07\x03\x63\xc0\x8a\xf1\x20\xe3\xdc\x84\xb2\xf7\x1a\x0c\x15\x3a\x49\xce\x51\xcc\x0b\x9a\xdb\xff\xf9\xb7\x9d\x32\xdd\xa0\x8d\xc0\xaf\x9c\x8d\x8b\x73\xac\x94\xbe\x09\x58\xfc\xe5\x94\x1d\x2f\x96\xd0\xa0\x69\xe2\x46\x5a\x95\x1f\xfa\xb2\x14\xb3\x63\x61\xf9\x64\x28\xce\x58\xb3\x15\x33\x22\x0a\xa9\x0a\x6d\xa1\x8c\xc0\x93\xe3\x10\x70\xf2\xea\x62\xd4\xaa\x30\x22\x93\xc6\x49\x1b\xc2\x17\x45\xae\x14\xfb\x64\x7e\x88\xee\x51\x54\xae\x06\x80\xc7\xc9\xc9\xcf\xed\xaf\xdf\x9b\xd0\x14\x42\x97\x52\x39\xd9\xb7\x39\x4c\xb5\x7c\xd1\x08\xb3\x3f\xfd\x1a\x88\xd9\x92\xb4\x5d\x4a\x63\xdd\x48\x01\xe3\xdf\x03\xa4\x96\xb9\x9b\x22\xae\x92\x64\xde\x6b\xd1\x12\x5c\x19\xc4\x6a\x24\x52\xa6\x10\xb0\xab\xaf\xd3\xf9\x02\x56\xf5\x15\x1a\xd6\x8a\x20\x58\xd2\x37\x02\x42\x4b\xaa\xa9\x35\xde\x44\xaa\x39\x3b\x1e\xba\xf0\x30\x6b\x20\xf3\x4e\x3b\xae\xc4\xc7\xfe\x37\x3d\x99\xc0\xc5\x8e\x6b\xcf\xb3\x1e\x09\xc7\xf0\x20\x34\x64\x3a\x10\x2b\x8c\x2b\xe3\xac\x54\x9a\xbe\x31\xd1\x77\x68\x9f\x98\x99\xaf\xbb\x2f\x94\x97\x7c\x96\xf6\x59\x91\x47\xf6\x15\x38\x9c\x65\x6f\x2a\xc9\x8c\x2d\x3a\xc5\x46\x18\x36\xe1\xd8\x70\x09\x28\xce\xaa\xf1\xc8\x04\x6d\x68\x4e\xb5\x1f\xe7\x73\x3f\x0c\x9e\xdf\xbe\x0a\xd3\x33\xf9\xbf\xaf\x6e\xd2\xa8\xd2\x4e\xca\xc7\xd4\x8b\x5d\xcc\x92\x64\xbb\xdb\xec\x7d\x55\xce\xb6\x7a\x75\x2d\x3f\x13\xee\xf6\x8d\x56\x7a\x1b\xbe\x7e\x4e\x3d\xcc\xc9\xcb\x3c\x3c\x93\x7b\xf4\x2f\x00\x00\xff\xff\x3e\xbf\x0b\xc5\x98\x03\x00\x00")

func resourcesStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_resourcesStyleCss,
		"resources/style.css",
	)
}

func resourcesStyleCss() (*asset, error) {
	bytes, err := resourcesStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/style.css", size: 920, mode: os.FileMode(420), modTime: time.Unix(1462280409, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesView_templateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x5b\x4f\xe3\x38\x14\x7e\x6e\x7f\x85\xb7\x08\x65\x57\x6a\x9b\x14\xba\x02\x4c\x9a\x15\x3b\xcc\x48\xf3\x32\x83\x46\x68\x24\x1e\xdd\xd8\x8d\x2d\x5c\x3b\xb2\xdd\x42\x15\xe5\xbf\x8f\x2f\x49\x7a\xa1\x80\x20\x48\xe4\xe3\x5c\xbe\xf3\x9d\x73\x1c\x93\xfe\x75\xfb\xf3\xcb\xfd\xc3\xdd\x57\x40\xcd\x92\x67\xfd\x34\xbc\xfa\xbd\x94\x12\x84\xb3\x7e\xaf\x97\x72\x26\x1e\x01\x55\x64\x31\x8b\xa8\x31\xa5\x86\x71\xbc\x90\xc2\xe8\x71\x21\x65\xc1\x09\x2a\x99\x1e\xe7\x72\x19\xe7\x5a\xff\xb7\x40\x4b\xc6\x37\xb3\x5f\x72\x2e\x8d\x84\xd3\x24\x19\x5e\x24\x49\x04\x14\xe1\xb3\x48\x9b\x0d\x27\x9a\x12\x62\x22\x60\x36\x25\x99\x45\x86\x3c\x1b\x97\x16\xf9\x3a\xde\xef\xd0\x5c\xe2\x0d\xa8\x2c\x00\xf6\x71\xa5\x46\x81\x16\x82\x28\x10\x47\x43\xa0\x91\xd0\x23\x4d\x14\x5b\x5c\x37\x81\x73\x94\x3f\x16\x4a\xae\x04\x1e\xe5\x92\x4b\x05\x4f\x30\xc6\xad\x73\x89\x54\xc1\x04\x44\x2b\x23\x5b\x93\x2b\x3e\x42\x9c\x15\x02\xe6\x44\x18\xa2\x5a\xc7\x13\xc3\x86\xc2\xab\xe4\xd4\x19\x6a\x3b\x8a\x1e\x9d\x74\x72\x5e\x56\x49\xce\x2f\xfe\xfd\x7f\xda\x26\x07\xe3\x13\x65\x86\x74\xe9\x06\xcd\x39\x79\x95\x00\x9c\x7c\xf3\x4f\xd7\x87\x54\x98\x28\xe7\xe4\xa8\xd4\x04\x82\x16\x1d\x11\xce\xc9\xc2\xec\xcb\x9e\x24\xc9\x69\x57\x17\x0f\x81\xa1\x6d\xe1\x12\x61\xcc\x44\x01\xc1\x65\xf9\xbc\x5f\x0b\x82\x49\xf9\x0c\xb4\xe4\x0c\x83\x76\x68\x0d\x01\x40\xa0\xc2\x4c\x97\x1c\x6d\xe0\x9c\xcb\xfc\xf1\x3a\x38\x3a\xd6\x46\xad\xdd\x8a\x91\x4b\xf8\x92\xe7\x13\x33\xdb\x11\x3b\x32\xb2\xb4\xea\xce\xb6\x8a\x5b\x47\x53\xb0\xf3\x05\x59\x0a\x0a\x43\x47\x39\x65\x1c\xff\x2d\x31\xfe\x07\x54\x47\xc6\xbd\x38\x73\x3f\x6d\x02\x95\x6b\xa2\x8e\x85\xd9\x06\x7c\x0c\xea\x76\xef\x07\x8f\x49\x2e\x15\x32\x4c\x0a\x28\xa4\xd8\x2e\x19\x0d\x01\x82\x6b\xa6\x6d\x13\x18\x54\x81\x64\xce\x2d\xad\xf7\x8e\x05\x5a\x7f\xf2\x08\xed\xee\x6e\xaf\x5b\xc7\xd9\x56\xac\x76\x92\xb6\xce\x57\x7a\x3b\x49\x92\x8b\xcb\xe9\x95\x8f\x5b\x48\xb5\x7c\xfd\x70\xbf\x2f\xc2\xcd\x04\x29\x62\x87\xf4\xfe\x87\xda\x08\x5b\xd9\x82\x2f\x3e\xbe\xda\xdd\x00\x71\x7b\x05\xa4\x71\xb8\x7d\x2c\x72\x97\x81\xbf\x1e\xe8\x24\x03\x55\x35\xbe\x67\x86\x93\xba\x06\x36\x64\xe2\xed\x08\xe4\x1c\x69\x3d\x1b\xd8\x8e\x07\xe1\x9e\x1a\x8c\xc7\xf1\x9a\x91\xa7\x78\x90\xfd\xb6\xaf\x34\x46\x6f\x45\xda\xb6\x6c\xe0\x0d\xc6\x6d\xdc\x5c\x81\x38\x0b\xbf\xdd\x9f\xfe\xf3\x05\x0e\x5a\xac\xfc\xdb\x02\x9a\xdd\xac\x0c\x95\x4a\xa7\xb1\xc5\x9d\xf1\x81\x20\xb5\x6f\xf1\x82\x0f\x4c\xa8\x38\x48\xfb\x21\x0d\xd9\x9a\x2c\x08\x75\xaa\x4a\x21\x51\x10\x30\xbe\x43\x25\x51\xba\xae\x0f\x44\xe0\xcc\x36\xd5\x35\x42\x30\x33\xb1\x1d\xd1\xf7\xdb\xba\x1e\x64\x16\x34\x0a\xeb\xda\x75\x66\x49\x71\x97\xd7\x4d\x62\xb5\x1c\xbc\xcd\xe1\x1a\x3a\x42\xf0\x76\x52\xb3\xa4\x8f\x66\xa1\x62\x52\xd7\x43\x10\xe0\xd9\x16\x9e\x6f\xe1\xf4\xc3\xac\x7e\xb4\x07\x59\x3b\x03\x26\x02\xd7\xe1\xf0\xf9\x3d\xbb\xc3\xd7\x6c\x3e\x8d\xc3\xd9\xeb\xdb\xa3\xe6\xff\x29\xfe\x09\x00\x00\xff\xff\x5e\x83\x04\x3f\x2c\x07\x00\x00")

func resourcesView_templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesView_templateHtml,
		"resources/view_template.html",
	)
}

func resourcesView_templateHtml() (*asset, error) {
	bytes, err := resourcesView_templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/view_template.html", size: 1836, mode: os.FileMode(420), modTime: time.Unix(1466058780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/add_template.html": resourcesAdd_templateHtml,
	"resources/edit_template.html": resourcesEdit_templateHtml,
	"resources/style.css": resourcesStyleCss,
	"resources/view_template.html": resourcesView_templateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"add_template.html": &bintree{resourcesAdd_templateHtml, map[string]*bintree{}},
		"edit_template.html": &bintree{resourcesEdit_templateHtml, map[string]*bintree{}},
		"style.css": &bintree{resourcesStyleCss, map[string]*bintree{}},
		"view_template.html": &bintree{resourcesView_templateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

